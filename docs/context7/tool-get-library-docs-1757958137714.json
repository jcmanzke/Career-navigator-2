{
  "content": [
    {
      "type": "text",
      "text": "================\nCODE SNIPPETS\n================\nTITLE: Define API Routes and Route Handlers in Next.js App Router\nDESCRIPTION: This snippet illustrates how to define API endpoints using Route Handlers in the Next.js `app` directory. It provides examples for both TypeScript and JavaScript implementations, demonstrating how to handle `GET` requests using the Web Request API. This replaces traditional API Routes in the `pages/api` directory for the App Router.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport async function GET(request) {}\n```\n\n--------------------------------\n\nTITLE: Update Next.js to Latest Version for App Router\nDESCRIPTION: This command updates your Next.js project to the latest version (13.4 or greater), which is required to use the new `app` directory and its features.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Implement various data fetching strategies in Next.js App Router\nDESCRIPTION: Demonstrates how to perform static data fetching (`force-cache`), dynamic data fetching (`no-store`), and revalidated data fetching using the `fetch()` API within Next.js App Router Server Components. This approach replaces the functionality of `getStaticProps` and `getServerSideProps` from the `pages` directory.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n--------------------------------\n\nTITLE: Implement server-side data fetching with no-store cache in Next.js App Router\nDESCRIPTION: Demonstrates how to achieve server-side rendering behavior, similar to `getServerSideProps`, within the Next.js App Router. This is done by using `fetch()` with the `cache: 'no-store'` option inside an `async` Server Component, ensuring data is refetched on every request.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Configure Tailwind CSS for Next.js App Router Styling\nDESCRIPTION: This snippet details the necessary configuration for using Tailwind CSS with the Next.js App Router. It shows how to update the `tailwind.config.js` file to include the `app` directory in the content paths and how to import global stylesheets into `app/layout.js`, enabling broader styling flexibility.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport '../styles/globals.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Resolve Dynamic href Not Supported Error in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to fix the 'Dynamic `href` is not supported in the App Router' error when using `next/link`. The issue arises because the new client-side router expects direct paths. The 'Before' examples show incorrect dynamic `href` usage, while the 'After' example illustrates the correct approach by replacing dynamic segments with direct values in the `href` attribute.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-dir-dynamic-href.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link\n  href={{\n    pathname: '/route/[slug]',\n    query: { slug: '1' },\n  }}\n>\n  link\n</Link>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/route/[slug]?slug=1\">link</Link>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/route/1\">link</Link>\n```\n\n--------------------------------\n\nTITLE: Next.js App Router: Using Navigation Hooks in Client Components\nDESCRIPTION: Demonstrates how to import and use the new `useRouter`, `usePathname`, and `useSearchParams` hooks from `next/navigation` within a Next.js App Router client component. These hooks provide access to routing functionalities like navigation, current path, and search parameters, and are exclusively supported in Client Components.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}\n```\n\n--------------------------------\n\nTITLE: Create Next.js App Router Pages for Playwright E2E Testing\nDESCRIPTION: Define two Next.js pages (`/` and `/about`) using the App Router structure. These pages include `Link` components for navigation, which will be tested by Playwright.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Perform Static Site Generation with `fetch` Caching in Next.js `app` Directory\nDESCRIPTION: Explains how `fetch()` in the Next.js `app` directory defaults to `cache: 'force-cache'`, mimicking `getStaticProps` behavior for static data fetching and rendering.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Index() {\n  const projects = await getProjects()\n\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n--------------------------------\n\nTITLE: Define Blog Index Page with Next.js App Router\nDESCRIPTION: This code defines the main page for the `/blog` route in a Next.js application using the App Router. It fetches a list of posts asynchronously and renders them using a `Post` component, demonstrating how to create a public-facing route that displays dynamic content.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n\nexport default async function Page() {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Dummy imports\nimport { getPosts } from '@/lib/posts'\nimport { Post } from '@/ui/post'\n\nexport default async function Page() {\n  const posts = await getPosts()\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Create Next.js App Router pages for E2E testing\nDESCRIPTION: Define example `app/page.js` and `app/about/page.js` files with navigation links. These pages will serve as the target for your Cypress E2E navigation tests in an App Router project.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Final Component for `app` Directory with `useSearchParams`\nDESCRIPTION: Presents the simplified component after full migration to the `app` directory, removing `next/compat/router` dependencies. It directly uses `useSearchParams` from `next/navigation`, as null checks for the router are no longer required in an `app` directory-only context.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSearchParams } from 'next/navigation'\nconst MyComponent = () => {\n  const searchParams = useSearchParams()\n  // As this component is only used in `app/`, the compat router can be removed.\n  const search = searchParams.get('search')\n  // ...\n}\n```\n\n--------------------------------\n\nTITLE: Define a GET Route Handler in Next.js App Router\nDESCRIPTION: Illustrates how to create a basic GET request handler using the `route.ts` or `route.js` file convention in the Next.js App Router, making it accessible at `/api`.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function GET(request: Request) {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function GET(request) {}\n```\n\n--------------------------------\n\nTITLE: Add Metadata to Next.js App Router Root Layout\nDESCRIPTION: This example shows how to export a `metadata` object from your `app/layout.tsx` or `app/layout.js` file to define page-specific SEO information like title and description. This leverages Next.js's built-in metadata API for the App Router.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n--------------------------------\n\nTITLE: Upgrade ESLint Configuration for Next.js\nDESCRIPTION: This command updates the `eslint-config-next` package to its latest version as a development dependency. Upgrading ESLint is necessary to ensure that your linting rules are compatible with the new App Router conventions and features, helping maintain code quality and consistency.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D eslint-config-next@latest\n```\n\n--------------------------------\n\nTITLE: Illustrate Next.js App Router Optional Catch-All Directory Structure\nDESCRIPTION: This snippet illustrates the required directory structure for an optional catch-all route in Next.js App Router. It shows how to create a `[[...slug]]` directory inside the `app` directory, which will contain the `page.tsx` file. This setup allows Next.js to intercept all routes and direct them to the specified page.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\napp\n ┣ [[...slug]]\n ┃ ┗ page.tsx\n ┣ layout.tsx\n```\n\n--------------------------------\n\nTITLE: Next.js: Defining Dynamic Paths for Static Generation (`pages` vs `app`)\nDESCRIPTION: This snippet demonstrates how to define dynamic routes for static pre-rendering in Next.js. It shows the `getStaticPaths` function used in the `pages` directory to return an array of `params` objects, and its equivalent `generateStaticParams` in the `app` directory, which returns a simpler array of segments. Both functions are crucial for specifying which dynamic pages should be built at compile time.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return { props: { post } }\n}\n\nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n\nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${(await params).id}`)\n  const post = await res.json()\n\n  return post\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params)\n\n  return <PostLayout post={post} />\n}\n```\n\n--------------------------------\n\nTITLE: Create Dynamic Segments and Access Params in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to define dynamic routes in the Next.js App Router by wrapping folder names in square brackets (e.g., `[slug]`). It shows how to access the dynamic segment's value using the `params` prop passed to a Server Component page, enabling data fetching based on the URL segment. This pattern is essential for generating routes from data, such as individual blog posts or product pages.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function BlogPostPage({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const post = await getPost(slug)\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function BlogPostPage({ params }) {\n  const { slug } = await params\n  const post = await getPost(slug)\n\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Define Next.js App Router Catch-All Entrypoint Page\nDESCRIPTION: This snippet defines the initial `page.tsx` (or `page.js`) for an optional catch-all route `[[...slug]]` in a Next.js App Router. It uses `generateStaticParams` to create a single route for the empty slug, effectively mapping all paths to this page, which initially returns a placeholder. This page acts as a Server Component.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n--------------------------------\n\nTITLE: Configure i18n Redirects in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to set up redirects with internationalization support in `next.config.js` for the Next.js App Router. It shows examples for hardcoded locale paths, dynamic locale parameters, and catch-all redirects, emphasizing that locales must be manually handled or hardcoded within `next.config.js` for App Router redirects.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        // Manually handle locale prefixes for App Router\n        source: '/en/old-path',\n        destination: '/en/new-path',\n        permanent: false,\n      },\n      {\n        // Redirect for all locales using a parameter\n        source: '/:locale/old-path',\n        destination: '/:locale/new-path',\n        permanent: false,\n      },\n      {\n        // Redirect from one locale to another\n        source: '/de/old-path',\n        destination: '/en/new-path',\n        permanent: false,\n      },\n      {\n        // Catch-all redirect for multiple locales\n        source: '/:locale(en|fr|de)/:path*',\n        destination: '/:locale/new-section/:path*',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n--------------------------------\n\nTITLE: Define Content Specific to Next.js App or Pages Router\nDESCRIPTION: Demonstrates how to use `<AppOnly>` or `<PagesOnly>` MDX components to conditionally display content based on whether the user is viewing documentation for the Next.js App Router or Pages Router. This ensures that router-specific information is presented accurately.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\nThis content is shared between App and Pages.\n\n<PagesOnly>\n\nThis content will only be shown on the Pages docs.\n\n</PagesOnly>\n\nThis content is shared between App and Pages.\n```\n\n--------------------------------\n\nTITLE: Implement Basic Next.js Link Component in App Router\nDESCRIPTION: Provides a minimal working example of the Next.js `<Link>` component within an App Router page. It includes the necessary import statement and component usage, emphasizing that code examples should be runnable and self-contained.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n```\n\n--------------------------------\n\nTITLE: Access Request Object in Next.js `pages` Directory\nDESCRIPTION: Demonstrates how to retrieve the `req` object within `getServerSideProps` in the Next.js `pages` directory to access request headers and cookies, leveraging Node.js HTTP API.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\n\nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n\n  return { props: { ... }}\n}\n\nexport default function Page(props) {\n  return ...\n}\n```\n\n--------------------------------\n\nTITLE: Bundle All Packages in Next.js Pages Router with bundlePagesRouterDependencies\nDESCRIPTION: Enable `bundlePagesRouterDependencies` in `next.config.js` to automatically bundle all packages in the Pages Router. This option provides similar default bundling behavior to the App Router.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  bundlePagesRouterDependencies: true,\n}\n\nmodule.exports = nextConfig\n```\n\n--------------------------------\n\nTITLE: Define Next.js Root Layout for App Directory\nDESCRIPTION: This snippet demonstrates how to create a `RootLayout` component in `app/layout.tsx` or `app/layout.js`. This root layout is mandatory for the `app` directory, replaces `_app.tsx` and `_document.tsx`, and must include `<html>` and `<body>` tags to wrap the `children` prop.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Configure Next.js Link Prefetching in App Router\nDESCRIPTION: This snippet demonstrates how to control prefetching behavior for Next.js <Link /> components within the App Router. Prefetching loads linked routes and their data in the background to improve navigation performance. It is only enabled in production. The `prefetch` prop can be set to \"auto\" (default), `true` for full prefetching, or `false` to disable it.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Embed Google Maps in Next.js App Router\nDESCRIPTION: Demonstrates how to use the `GoogleMapsEmbed` component from `@next/third-parties/google` to embed a Google Map in a Next.js application using the App Router. This example shows basic usage with `apiKey`, `height`, `width`, `mode`, and `q` properties to display a specific location.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Example Next.js App Router Page Component\nDESCRIPTION: A basic Next.js page component for the App Router (`app/page.tsx` or `app/page.jsx`) that will be used as the subject for unit testing. It includes a heading and a link to demonstrate a simple UI structure.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Access Request Headers and Cookies in Next.js `app` Directory\nDESCRIPTION: Illustrates using `headers()` and `cookies()` functions in the Next.js `app` directory to retrieve request data within Server Components or data fetching functions, based on Web Headers/Cookies API.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = (await headers()).get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies` or `headers` inside Server Components\n  // directly or in your data fetching function\n  const theme = (await cookies()).get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = (await headers()).get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies` or `headers` inside Server Components\n  // directly or in your data fetching function\n  const theme = (await cookies()).get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\n--------------------------------\n\nTITLE: Perform Static Site Generation with `getStaticProps` in Next.js `pages` Directory\nDESCRIPTION: Shows how to use `getStaticProps` in the Next.js `pages` directory to pre-render a page at build time by fetching data from an external source and passing it as props.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\n\nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n--------------------------------\n\nTITLE: Import custom polyfills in Next.js App Router\nDESCRIPTION: This example demonstrates how to include custom polyfills for the Next.js App Router. Polyfills should be imported into the `instrumentation-client.ts` file, ensuring they are available for features not natively supported by target browsers.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/supported-browsers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport './polyfills'\n```\n\n--------------------------------\n\nTITLE: Migrate to `next/compat/router` for App/Pages Compatibility\nDESCRIPTION: Demonstrates refactoring a component to use `next/compat/router` for compatibility across `app` and `pages` directories. The `useRouter` hook from `next/compat/router` can return `null`, necessitating a null check before accessing router properties. It also integrates `useSearchParams` for consistent query parameter access.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/compat/router'\nimport { useSearchParams } from 'next/navigation'\nconst MyComponent = () => {\n  const router = useRouter() // may be null or a NextRouter instance\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    if (router && !router.isReady) {\n      return\n    }\n    // In `app/`, searchParams will be ready immediately with the values, in\n    // `pages/` it will be available after the router is ready.\n    const search = searchParams.get('search')\n    // ...\n  }, [router, searchParams])\n  // ...\n}\n```\n\n--------------------------------\n\nTITLE: Read Runtime Environment Variables in Next.js App Router\nDESCRIPTION: Demonstrates how to safely read environment variables on the server during dynamic rendering within the Next.js App Router. This approach ensures that environment variables are evaluated at runtime, allowing for a singular Docker image to be promoted across different environments. It leverages dynamic APIs like `connection` to opt into dynamic rendering.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { connection } from 'next/server'\n\nexport default async function Component() {\n  await connection()\n  // cookies, headers, and other Dynamic APIs\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n--------------------------------\n\nTITLE: Load Google Tag Manager for a single route in Next.js App Router\nDESCRIPTION: Integrate Google Tag Manager for a specific page in a Next.js App Router application. Import the `GoogleTagManager` component from `@next/third-parties/google` and include it directly in your page component, passing your GTM container ID.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\n```\n\n--------------------------------\n\nTITLE: Define a Basic Root Layout in Next.js App Router\nDESCRIPTION: This snippet shows the fundamental structure of a root layout (`app/layout.tsx` or `app/layout.js`) in Next.js's App Router. It must include `<html>` and `<body>` tags and accept `children` to render nested content. This layout serves as the top-level wrapper for the entire application.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Next.js: Controlling Fallback Behavior for Dynamic Routes (`pages` vs `app`)\nDESCRIPTION: This snippet illustrates how Next.js handles dynamic routes that are not pre-rendered at build time. It compares the `fallback` property within `getStaticPaths` in the `pages` directory (allowing `true`, `false`, or `'blocking'`) with the `dynamicParams` configuration in the `app` directory. `dynamicParams` (true/false) controls whether ungenerated segments result in on-demand generation or a 404, replacing the `fallback` mechanism.\n\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// `pages` directory\n\nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  ...\n}\n\nexport default function Post({ post }) {\n  return ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// `app` directory\n\nexport const dynamicParams = true;\n\nexport async function generateStaticParams() {\n  return [...]\n}\n\nasync function getPost(params) {\n  ...\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params);\n\n  return ...\n}\n```"
    }
  ]
}