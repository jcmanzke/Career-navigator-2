{
  "content": [
    {
      "type": "text",
      "text": "================\nCODE SNIPPETS\n================\nTITLE: Install latest Next.js for App Router migration (npm)\nDESCRIPTION: Update your project to Next.js version 13.4 or greater using npm. This is a mandatory first step to enable the `app` directory and begin migrating to the App Router architecture.\n\nSOURCE: https://nextjs.org/docs/13/pages/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Update Next.js to Latest Version for App Router Migration\nDESCRIPTION: Before migrating to the `app` directory, ensure your Next.js project is updated to version 13.4 or greater. This command installs the latest stable release of Next.js, providing access to the App Router and its associated features.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Install Latest Next.js Version for App Router Migration\nDESCRIPTION: This command updates your Next.js project to the latest version (13.4 or greater), which is a prerequisite for utilizing the `app` directory and its features. It ensures compatibility with the new App Router architecture.\n\nSOURCE: https://nextjs.org/docs/14/pages/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Update Next.js to Latest Version for App Router Migration\nDESCRIPTION: Before migrating to the `app` directory, ensure your Next.js project is updated to version 13.4 or greater. This command installs the latest stable release of Next.js, providing access to the App Router and its associated features.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Define Next.js App Router API Route Handler (GET)\nDESCRIPTION: Demonstrates how to create a custom request handler for a given route in the Next.js `app` directory using the Web Request API. This replaces traditional API Routes and supports methods like GET.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\n--------------------------------\n\nTITLE: Create Root Layout for Next.js App Router\nDESCRIPTION: The `app` directory requires a root layout (`app/layout.tsx` or `app/layout.js`) that wraps all routes. This layout must define `<html>` and `<body>` tags, serving as the primary UI structure for your application. It replaces the functionality of `pages/_app.tsx` and `pages/_document.tsx`.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Update Next.js for App Router Migration\nDESCRIPTION: This command updates your Next.js project to the latest version (13.4 or greater), which is a prerequisite for utilizing the new `app` directory and its features. It ensures compatibility with the App Router.\n\nSOURCE: https://nextjs.org/docs/14/app/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: shell\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Add Metadata to Next.js App Router Root Layout\nDESCRIPTION: Manage HTML `<head>` elements and improve SEO by defining `metadata` within your root layout. This object allows you to set page titles, descriptions, and other meta tags, providing built-in SEO support for your App Router pages.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n--------------------------------\n\nTITLE: Import Global Styles in Next.js App Router Root Layout\nDESCRIPTION: Shows the recommended way to import global stylesheets, such as `globals.css`, into the `app/layout.js` file. This allows global styles to be applied across the entire application when using the App Router.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '../styles/globals.css'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Create an Index Page in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to create a basic index page (`/`) in Next.js App Router. By defining a `page.tsx` file at the root of the `app` directory and default exporting a React component, you can render the UI for your application's homepage.\n\nSOURCE: https://nextjs.org/docs/app/getting-started/layouts-and-pages\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello Next.js!</h1>\n}\n```\n\n--------------------------------\n\nTITLE: Define a Basic GET Route Handler in Next.js App Router\nDESCRIPTION: This snippet demonstrates the basic convention for defining a GET Route Handler in Next.js 13's App Router. Route Handlers are placed in a `route.js` or `route.ts` file within the `app` directory and use the Web Request and Response APIs to handle incoming requests.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/routing/route-handlers\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\n--------------------------------\n\nTITLE: Create Root Layout for Next.js App Router\nDESCRIPTION: The `app` directory requires a root layout (`app/layout.tsx` or `app/layout.js`) that wraps all routes. This layout must define `<html>` and `<body>` tags, serving as the primary UI structure for your application. It replaces the functionality of `pages/_app.tsx` and `pages/_document.tsx`.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Static manifest.json Configuration for Next.js App Router\nDESCRIPTION: To provide static web application information, add a `manifest.json` or `manifest.webmanifest` file directly in the root of your `app` directory. This file should conform to the Web Manifest Specification.\n\nSOURCE: https://nextjs.org/docs/app/api-reference/file-conventions/metadata/manifest\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // ...\n}\n```\n\n--------------------------------\n\nTITLE: Define a Root Layout in Next.js App Router (TypeScript/JavaScript)\nDESCRIPTION: This code defines the essential `RootLayout` component for the Next.js App Router, located at `app/layout.tsx`. It accepts `children` to render nested layouts or pages and includes the necessary `<html>` and `<body>` tags, replacing `_app.js` and `_document.js` from the `pages` directory. This layout applies to all routes within the `app` directory.\n\nSOURCE: https://nextjs.org/docs/13/pages/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Define API Route Handler in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to define a GET request handler using the Web Request and Response APIs within the `app` directory. This approach replaces the traditional API routes found in the `pages/api` directory, providing a new way to create custom server-side endpoints.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\n--------------------------------\n\nTITLE: Define Root Page in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to create the root page (`/`) for a Next.js application using the App Router. A React component is exported from `app/page.tsx` to define the UI for the home route.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/routing/pages-and-layouts\n\nLANGUAGE: TypeScript\nCODE:\n```\n// `app/page.tsx` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n```\n\n--------------------------------\n\nTITLE: Define Root Layout in Next.js App Router\nDESCRIPTION: This snippet demonstrates the required root layout for a Next.js App Router application. Defined at the top level of the `app` directory, it applies to all routes and must include `<html>` and `<body>` tags to modify the initial HTML returned from the server.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/routing/pages-and-layouts\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Handling Next.js Router Events with usePathname and useSearchParams\nDESCRIPTION: Illustrates how to listen for page changes and router events in Next.js App Router by composing `usePathname` and `useSearchParams` hooks within a `useEffect`. This allows tracking the current URL and can be integrated into a layout component using `Suspense`.\n\nSOURCE: https://nextjs.org/docs/13/app/api-reference/functions/use-router\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use client'\n \nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n \nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // You can now use the current URL\n    // ...\n  }, [pathname, searchParams])\n \n  return null\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './components/navigation-events'\n \nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n \n        <Suspense fallback={null}>\n          <NavigationEvents />\n        </Suspense>\n      </body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Implement Incremental Static Regeneration (ISR) in Next.js (`pages` vs `app`)\nDESCRIPTION: This snippet demonstrates how to implement Incremental Static Regeneration (ISR) in Next.js to automatically re-generate pages after a specified time. It shows the `revalidate` option within `getStaticProps` for the `pages` directory and the `revalidate` option in `fetch()` for the `app` directory's data fetching.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n \n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n \nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\n \nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n \n  return data.posts\n}\n \nexport default async function PostList() {\n  const posts = await getPosts()\n \n  return posts.map((post) => <div>{post.name}</div>)\n}\n```\n\n--------------------------------\n\nTITLE: Update Next.js to latest version for App Router\nDESCRIPTION: This command updates your Next.js project to the latest version (13.4 or greater), which is a prerequisite for using the new `app` directory and its features. Ensure your project meets this version requirement before proceeding with the migration.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install next@latest\n```\n\n--------------------------------\n\nTITLE: Cache a Next.js App Router GET Route Handler with `force-static`\nDESCRIPTION: This example illustrates how to enable caching for a GET Route Handler in Next.js App Router by exporting `dynamic = 'force-static'`. It also shows a common pattern of fetching external data and returning a JSON response, demonstrating how to integrate data fetching with caching for static content.\n\nSOURCE: https://nextjs.org/docs/app/getting-started/route-handlers-and-middleware\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const dynamic = 'force-static'\n\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const dynamic = 'force-static'\n\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n--------------------------------\n\nTITLE: Define Dynamic Paths for Static Generation in Next.js (`pages` vs `app`)\nDESCRIPTION: This snippet demonstrates how to define dynamic routes that should be pre-rendered at build time in Next.js. It shows the usage of `getStaticPaths` in the `pages` directory and its equivalent, `generateStaticParams`, in the `app` directory, highlighting their different return formats and APIs.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n \nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return { props: { post } }\n}\n \nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n \nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${(await params).id}`)\n  const post = await res.json()\n \n  return post\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params)\n \n  return <PostLayout post={post} />\n}\n```\n\n--------------------------------\n\nTITLE: Next.js Static Site Generation (SSG) with `getStaticProps` and App Router\nDESCRIPTION: Illustrates static site generation (SSG) in Next.js. Shows `getStaticProps` in the `pages` directory for pre-rendering pages at build time by fetching data. Also demonstrates the equivalent in the `app` directory where `fetch()` defaults to `cache: 'force-cache'` for similar build-time data fetching and caching.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Index() {\n  const projects = await getProjects()\n \n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n--------------------------------\n\nTITLE: Add Metadata to Next.js App Router Root Layout\nDESCRIPTION: Manage HTML `<head>` elements and improve SEO by defining `metadata` within your root layout. This object allows you to set page titles, descriptions, and other meta tags, providing built-in SEO support for your App Router pages.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n--------------------------------\n\nTITLE: Create a basic Next.js App Router page component\nDESCRIPTION: This example demonstrates how to create a simple page in a Next.js App Router application. By exporting a React component from a `page.js` (or `page.tsx`) file within an app directory, the corresponding route segment becomes publicly accessible, rendering the component's UI.\n\nSOURCE: https://nextjs.org/docs/14/app/building-your-application/routing/defining-routes\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n--------------------------------\n\nTITLE: Create a root layout for Next.js App Router\nDESCRIPTION: This code defines the essential `app/layout.tsx` file, which acts as the root layout for all routes within the `app` directory. It must accept a `children` prop and explicitly define `<html>` and `<body>` tags, replacing the functionality of `_app.js` and `_document.js` from the `pages` directory.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Next.js Server-Side Rendering (SSR) with `getServerSideProps` and App Router\nDESCRIPTION: Demonstrates server-side rendering (SSR) in Next.js. Shows `getServerSideProps` in the `pages` directory for dynamic data fetching and its equivalent in the `app` directory using Server Components with `fetch` and `cache: 'no-store'` for similar request-time data retrieval.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\n \nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Dashboard() {\n  const projects = await getProjects()\n \n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Configure Tailwind CSS Content Paths for Next.js App Directory\nDESCRIPTION: Illustrates how to update the `tailwind.config.js` file to include the new `app` directory, ensuring Tailwind CSS correctly scans and processes styles from components and pages within it.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\n--------------------------------\n\nTITLE: Programmatic Navigation with useRouter in Next.js App Router\nDESCRIPTION: Demonstrates how to use the `useRouter` hook from `next/navigation` to programmatically navigate to a new route (e.g., `/dashboard`) when a button is clicked. This example is implemented within a client-side component.\n\nSOURCE: https://nextjs.org/docs/14/app/api-reference/functions/use-router\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use client'\\n\\nimport { useRouter } from 'next/navigation'\\n\\nexport default function Page() {\\n  const router = useRouter()\\n\\n  return (\\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\\n      Dashboard\\n    </button>\\n  )\\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use client'\\n\\nimport { useRouter } from 'next/navigation'\\n\\nexport default function Page() {\\n  const router = useRouter()\\n\\n  return (\\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\\n      Dashboard\\n    </button>\\n  )\\n}\n```\n\n--------------------------------\n\nTITLE: Create a Basic Next.js App Router Layout with TypeScript\nDESCRIPTION: This snippet demonstrates how to define a simple layout component in Next.js App Router. Layouts wrap child route segments, providing shared UI. The `children` prop is essential for rendering nested content.\n\nSOURCE: https://nextjs.org/docs/13/app/api-reference/file-conventions/layout\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\n--------------------------------\n\nTITLE: Cache Data with `fetch` in Next.js App Router\nDESCRIPTION: Demonstrates how to force-cache a `fetch` request in a Next.js App Router page component by setting the `cache` option to `'force-cache'`. This ensures the data is stored for faster future retrieval, preventing redundant network requests for the same data.\n\nSOURCE: https://nextjs.org/docs/app/getting-started/caching-and-revalidating\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://...', { cache: 'force-cache' })\n}\n```\n\n--------------------------------\n\nTITLE: Create a Basic Root Layout in Next.js App Router (`app/layout.tsx`)\nDESCRIPTION: This snippet demonstrates how to create the initial `app/layout.tsx` file, which serves as the root layout for all routes within the `app` directory. It defines the fundamental HTML structure, including `<html>` and `<body>` tags, and accepts a `children` prop to render nested layouts or pages.\n\nSOURCE: https://nextjs.org/docs/14/pages/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Next.js Accessing Request Headers and Cookies in Pages and App Router\nDESCRIPTION: Explains how to access request-specific data like headers and cookies in Next.js. Shows `getServerSideProps` in the `pages` directory for Node.js `req` object access, and dedicated `headers()` and `cookies()` functions from `next/headers` in the `app` directory's Server Components.\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\n \nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n \n  return { props: { ... }}\n}\n \nexport default function Page(props) {\n  return ...\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n \nasync function getData() {\n  const authHeader = (await headers()).get('authorization')\n \n  return '...'\n}\n \nexport default async function Page() {\n  // You can use `cookies` or `headers` inside Server Components\n  // directly or in your data fetching function\n  const theme = (await cookies()).get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\n--------------------------------\n\nTITLE: Import Global Styles in Next.js App Router Root Layout\nDESCRIPTION: This example illustrates how to import global stylesheets into the `app/layout.js` file, which serves as the root layout component for the Next.js App Router. Unlike the `pages` directory where global styles were restricted to `_app.js`, the `app` directory allows importing global styles directly into any layout, page, or component.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '../styles/globals.css'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Configure Tailwind CSS Content Paths for Next.js App Router\nDESCRIPTION: This configuration snippet shows how to update your `tailwind.config.js` file to include the `app` directory. Adding `'./app/**/*.{js,ts,jsx,tsx,mdx}'` to the `content` array ensures that Tailwind CSS scans files within the new App Router structure for utility classes, enabling proper styling.\n\nSOURCE: https://nextjs.org/docs/app/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\n--------------------------------\n\nTITLE: Control Un-pre-rendered Page Behavior in Next.js (`pages` vs `app`)\nDESCRIPTION: This snippet illustrates how Next.js handles requests for dynamic paths that were not pre-rendered at build time. It compares the `fallback` property in `getStaticPaths` for the `pages` directory with the `dynamicParams` configuration in the `app` directory, explaining their respective behaviors (e.g., 404, blocking, on-demand generation).\n\nSOURCE: https://nextjs.org/docs/pages/guides/migrating/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\n \nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n \nexport async function getStaticProps({ params }) {\n  ...\n}\n \nexport default function Post({ post }) {\n  return ...\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\n \nexport const dynamicParams = true;\n \nexport async function generateStaticParams() {\n  return [...]\n}\n \nasync function getPost(params) {\n  ...\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params);\n \n  return ...\n}\n```\n\n--------------------------------\n\nTITLE: Define MDX Components for App Router\nDESCRIPTION: Creates the `mdx-components.tsx` file, which is required for MDX to function correctly with the Next.js App Router. This file defines how MDX components are resolved and used.\n\nSOURCE: https://nextjs.org/docs/14/app/building-your-application/configuring/mdx\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n--------------------------------\n\nTITLE: Define a Basic Next.js App Router GET Route Handler\nDESCRIPTION: This snippet demonstrates the fundamental structure for defining a GET request handler using the `route.ts` or `route.js` convention in the Next.js App Router. Route Handlers are equivalent to API Routes in the `pages` directory and utilize the Web Request and Response APIs.\n\nSOURCE: https://nextjs.org/docs/app/getting-started/route-handlers-and-middleware\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function GET(request) {}\n```\n\n--------------------------------\n\nTITLE: Define Dynamic Paths for Static Generation in Next.js `pages` and `app` directories\nDESCRIPTION: Explains how to define dynamic paths for pre-rendering using `getStaticPaths` in the `pages` directory. Contrasts this with `generateStaticParams` in the `app` directory, highlighting its simplified API for returning route parameters and its suitability for nested routing.\n\nSOURCE: https://nextjs.org/docs/13/app/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n \nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return { props: { post } }\n}\n \nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n \nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return post\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params)\n \n  return <PostLayout post={post} />\n}\n```\n\n--------------------------------\n\nTITLE: Using React `Suspense` for Manual Streaming in Next.js App Router\nDESCRIPTION: This snippet illustrates how to manually implement React `Suspense` boundaries within a Next.js App Router page component. It wraps asynchronous components like `PostFeed` and `Weather` with `<Suspense>`, providing specific fallback UI while their content loads. This enables fine-grained control over streaming and selective hydration, offering benefits like progressive rendering and prioritized interactivity.\n\nSOURCE: https://nextjs.org/docs/app/api-reference/file-conventions/loading\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n \nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n--------------------------------\n\nTITLE: Define Dynamic Route Segment in Next.js App Router\nDESCRIPTION: This example demonstrates how to define a dynamic route segment `[slug]` in Next.js App Router using `page.tsx`. The `params` prop provides access to the dynamic segment value, which can then be used within the page component to render dynamic content.\n\nSOURCE: https://nextjs.org/docs/14/app/building-your-application/routing/dynamic-routes\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <div>My Post: {params.slug}</div>\n}\n```\n\n--------------------------------\n\nTITLE: Create API Endpoints with Next.js (pages vs app)\nDESCRIPTION: This snippet demonstrates the evolution of API endpoint creation in Next.js. While API Routes in `pages/api` continue to function without changes, the `app` directory introduces Route Handlers. Route Handlers provide a modern approach to creating custom request handlers using Web Request and Response APIs.\n\nSOURCE: https://nextjs.org/docs/14/pages/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function GET(request: Request) {}\n```\n\n--------------------------------\n\nTITLE: Override Default Next.js App Component (Pages Router)\nDESCRIPTION: This snippet demonstrates how to create a custom `App` component in Next.js Pages Router by defining `pages/_app.tsx`. It initializes pages, allowing for shared layouts and global CSS. The `Component` prop represents the active page, and `pageProps` contains initial preloaded data.\n\nSOURCE: https://nextjs.org/docs/14/pages/building-your-application/routing/custom-app\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { AppProps } from 'next/app'\n \nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n--------------------------------\n\nTITLE: Define Dynamic Paths for Static Generation in Next.js `pages` and `app` directories\nDESCRIPTION: Explains how to define dynamic paths for pre-rendering using `getStaticPaths` in the `pages` directory. Contrasts this with `generateStaticParams` in the `app` directory, highlighting its simplified API for returning route parameters and its suitability for nested routing.\n\nSOURCE: https://nextjs.org/docs/14/app/building-your-application/upgrading/app-router-migration\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n \nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return { props: { post } }\n}\n \nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n \nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return post\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params)\n \n  return <PostLayout post={post} />\n}\n```"
    }
  ]
}